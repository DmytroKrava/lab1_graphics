const vertexSS = `
uniform mat4 MatrixOfNormals, MatrixOfViewProjection;
attribute vec3 vt, nm;
attribute vec2 tx;
uniform float limit, smooth;
uniform vec3 directionOfLight, positionOfLight;
varying vec3 normalInterp, verticalPosition;
varying vec2 texCoord;
varying vec3 fragmentColor;
uniform vec4 figureColor;
uniform vec2 txTr;
uniform float angle;

mat4 translation(vec3 t) {
    mat4 destination;
    destination[0][0] = 1.0;
    destination[0][1] = 0.0;
    destination[0][2] = 0.0;
    destination[0][3] = 0.0;
    destination[1][0] = 0.0;
    destination[1][1] = 1.0;
    destination[1][2] = 0.0;
    destination[1][3] = 0.0;
    destination[2][0] = 0.0;
    destination[2][1] = 0.0;
    destination[2][2] = 1.0;
    destination[2][3] = 0.0;
    destination[3][0] = t.x;
    destination[3][1] = t.y;
    destination[3][2] = t.z;
    destination[3][3] = 1.0;

    return destination;
}

mat4 rotation(float angleInRadians) {
    mat4 destination;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    destination[0][0] = c;
    destination[0][1] = s;
    destination[0][2] = 0.0;
    destination[0][3] = 0.0;
    destination[1][0] = -s;
    destination[1][1] = c;
    destination[1][2] = 0.0;
    destination[1][3] = 0.0;
    destination[2][0] = 0.0;
    destination[2][1] = 0.0;
    destination[2][2] = 1.0;
    destination[2][3] = 0.0;
    destination[3][0] = 0.0;
    destination[3][1] = 0.0;
    destination[3][2] = 0.0;
    destination[3][3] = 1.0;

    return destination;
}

void main() {
   vec4 txTr1 = translation(vec3(-txTr,0.0))*vec4(tx,0.,1.);
   vec4 txTr2 = rotation(angle)*txTr1;
   vec4 txTr3 = translation(vec3(txTr,0.0))*txTr2;
   texCoord = txTr3.xy;
   vec3 normalVector = normalize(mat3(MatrixOfNormals)*nm);
   vec3 vertexVector = mat3(MatrixOfViewProjection)*vt;
   vec3 vectorToLightPosition = positionOfLight-vertexVector;
   vec3 vectorToViewPosition = -vertexVector;
   vec3 halfVector = normalize(vectorToLightPosition + vectorToViewPosition);
   float prodLDandLS = dot(vectorToLightPosition, normalize(-directionOfLight));
   float smoothTransitionU_limitAndU_smoothValue = smoothstep(limit, limit + smooth, prodLDandLS);
   float mirroringLight = smoothTransitionU_limitAndU_smoothValue * pow(dot(normalVector, halfVector), 1.0);    
   normalInterp = vec3(MatrixOfNormals * vec4(nm, 0.0));
   vec3 normalToSurface = normalize(normalInterp);
   float lambertianCos = max(dot(normalToSurface, vectorToLightPosition), 0.0);
   if (lambertianCos > 0.0) {
      vec3 lightVector = reflect(-vectorToLightPosition, normalToSurface);
      vec3 vectorToObserver = normalize(-verticalPosition);
      float mirroringAngle = max(dot(lightVector, vectorToObserver), 0.0);
      mirroringLight = pow(mirroringAngle, 10.0);
   }
   fragmentColor = vec3(figureColor) + lambertianCos*vec3(0.0, 0.0, 0.0) + mirroringLight*vec3(1.0);
   gl_Position = MatrixOfViewProjection * vec4(vt, 1.0);
}`;


const fragmentSS = `

#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 fragmentColor;
varying vec2 texCoord;
uniform float limit, smooth;
uniform sampler2D tmu;
void main() {
   vec4 texColor = texture2D(tmu, texCoord);
   gl_FragColor = vec4(fragmentColor, 1.0);
   gl_FragColor = texColor;
   if(smooth<-100.0){
      gl_FragColor = vec4(0.0,1.0,0.0,1.0);
   }
}`;